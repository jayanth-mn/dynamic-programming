class Solution {
    
    
    public boolean canPartition(int[] nums) {
        int n = nums.length;
        int sum=0;
        for (int i =0; i<n; i++){
            sum += nums[i];
        }
        if ((sum%2)!=0) return false;
        int k=sum/2;
        boolean dp [][]= new boolean[n+1][k+1]; 
         for (int i = 0; i <=n; i++) {
            dp[i][0] = true;
        }
    
        // If size of array = 0, answer always false.
        for (int i = 1; i <= k; i++) {
            dp[0][i] = false;
        }
        
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= k; j++) {
                dp[i][j] = dp[i - 1][j];
                if (nums[i - 1] <= j) {
                    dp[i][j] = dp[i][j] || dp[i - 1][j -nums[i - 1]];
                }
            }
        }
        return dp[n-1][k];
    }
}
