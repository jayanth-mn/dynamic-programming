public class Solution {
     public static int fuf(int ind, int k, int heights[], int dp[]){
        if (ind == 0) {
            return 0;
        }
        int mini = Integer.MAX_VALUE;
        if (dp[ind]!=-1) return dp[ind];
        for (int i=1; i<=k; i++){
            
            if (ind-i >=0){
                int eng = Math.abs(heights[ind] - heights[ind-i]); 
            
            int f1 = fuf (ind-i, k, heights, dp) + eng;
            
            mini = Math.min(mini,f1) ;
            }
        
        }
        return dp[ind] = mini;
        
    }
    public static int minimizeCost(int n, int k, int []heights){
        // Write your code here.
         if (n == 1) {
            return 0; // No energy needed
        }
       int dp[] = new int[n+1];
       for (int i=0; i<=n; i++){
           dp[i]=-1;
       }
        int ind = n-1;
        return fuf (ind, k, heights, dp);
    }
}
