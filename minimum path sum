class Solution {
    public int fuf(int m, int n, int[][] dp, int[][] grid) {
        if (m < 0 || n < 0) {
            return Integer.MAX_VALUE;
        }
        
        if (m == 0 && n == 0) {
            return grid[0][0];
        }

        if (dp[m][n] != 0) {
            return dp[m][n];
        }
        int up =  fuf(m - 1, n, dp, grid);
        int left = fuf(m, n - 1, dp, grid);
        int sum = up + left;
        int mini = Math.min(up, left);
        dp[m][n] = mini + grid[m][n];
        return dp[m][n];
    }
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for (int i=0; i<m; i++){
            for (int j=0; j<n; j++){
                dp[i][j] = 0;
            }
        }
        return fuf(m - 1, n - 1, dp, grid);
    }
}
