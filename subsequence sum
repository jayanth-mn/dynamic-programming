import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean fuf (int ind, int k, int arr[], int [][] dp){
        if (k==0) return true;
        if( ind ==0) return (arr[0]==k);
        if (dp[ind][k] != -1) {return dp[ind][k]==1;}
        boolean nottake = fuf(ind-1, k, arr, dp);
        boolean take = false;
        if(arr[ind]<=k){
            take = fuf(ind-1, k-arr[ind], arr, dp);


        }
         dp[ind][k] = (take || nottake)?1:0;
         return dp[ind][k]==1;
    }
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
        int[][] dp = new int[n + 1][k + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        int ind = n-1;
        return fuf(ind, k, arr, dp);
    }
}
